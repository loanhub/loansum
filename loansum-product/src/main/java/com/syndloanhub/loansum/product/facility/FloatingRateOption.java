/**
 * Copyright (c) 2020 SyndLoanHub, LLC and contributors
 * 
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License from within this distribution and at:
 * 
 * http://www.apache.org/licenses/LICENSE-2.0
 */

package com.syndloanhub.loansum.product.facility;

import org.joda.beans.gen.BeanDefinition;
import org.joda.beans.gen.ImmutableDefaults;
import org.joda.beans.gen.ImmutableValidator;
import org.joda.beans.gen.PropertyDefinition;

import java.time.LocalDate;
import java.util.Map;
import java.util.NoSuchElementException;
import java.util.Optional;

import org.joda.beans.ImmutableBean;
import org.joda.beans.MetaBean;
import org.joda.beans.MetaProperty;
import org.joda.beans.impl.direct.DirectFieldsBeanBuilder;
import org.joda.beans.impl.direct.DirectMetaBean;
import org.joda.beans.impl.direct.DirectMetaPropertyMap;

import com.opengamma.strata.basics.StandardId;
import com.opengamma.strata.basics.currency.Currency;
import com.opengamma.strata.basics.date.DayCount;
import com.opengamma.strata.basics.date.DayCounts;
import com.opengamma.strata.basics.index.RateIndex;
import com.opengamma.strata.basics.schedule.Frequency;
import com.opengamma.strata.collect.ArgChecker;
import org.joda.beans.Bean;
import org.joda.beans.JodaBeanUtils;
import org.joda.beans.impl.direct.DirectMetaProperty;

/**
 * An implementation of an interest or fee accrual option featuring a fixed cash
 * rate and PIK spread.
 */
@BeanDefinition
public final class FloatingRateOption implements FeeAndRateOption, ImmutableBean {
  @PropertyDefinition(validate = "notNull")
  private final StandardId id;

  /**
   * The type of index, e.g. 'USD-LIBOR-1M'.
   */
  @PropertyDefinition(get = "optional")
  private final RateIndex index;

  /**
   * Return option type.
   */
  @Override
  public FeeAndRateOptionType getOptionType() {
    return FeeAndRateOptionType.FloatingRate;
  }

  /**
   * The start date of the option.
   * <p>
   * Interest accrues from this date.
   */
  @PropertyDefinition(validate = "notNull")
  private final LocalDate startDate;

  /**
   * The end date of the option.
   * <p>
   * Interest accrues to this date.
   */
  @PropertyDefinition(validate = "notNull")
  private final LocalDate endDate;

  /**
   * The cash rate of the accrual.
   * <p>
   * Cash interest "all-in" rate. Does NOT include PIK.
   */
  @PropertyDefinition(validate = "ArgChecker.notNegative")
  private final double rate;

  /**
   * The PIK rate of the accrual.
   * <p>
   * PIK interest.
   */
  @PropertyDefinition(validate = "ArgChecker.notNegative")
  private final double pikSpread;

  /**
   * The accrual option currency.
   */
  @PropertyDefinition(validate = "notNull")
  private final Currency currency;

  /**
   * The day count convention.
   * <p>
   * This is used to convert dates to a numerical value.
   */
  @PropertyDefinition(validate = "notNull")
  private final DayCount dayCount;

  /**
   * Frequency of accrual period.
   */
  @PropertyDefinition(validate = "notNull")
  private final Frequency paymentFrequency;

  /**
   * Default common values
   * 
   * @param builder
   */
  @ImmutableDefaults
  private static void applyDefaults(Builder builder) {
    builder.pikSpread(0).paymentFrequency(Frequency.P1M).dayCount(DayCounts.ACT_360).currency(Currency.USD);
  }

  /**
   * Validate that start date precedes end date and accrual amount if positive.
   */
  @ImmutableValidator
  private void validate() {
    ArgChecker.inOrderNotEqual(startDate, endDate, "startDate", "endDate");
  }

  //------------------------- AUTOGENERATED START -------------------------
  /**
   * The meta-bean for {@code FloatingRateOption}.
   * @return the meta-bean, not null
   */
  public static FloatingRateOption.Meta meta() {
    return FloatingRateOption.Meta.INSTANCE;
  }

  static {
    MetaBean.register(FloatingRateOption.Meta.INSTANCE);
  }

  /**
   * Returns a builder used to create an instance of the bean.
   * @return the builder, not null
   */
  public static FloatingRateOption.Builder builder() {
    return new FloatingRateOption.Builder();
  }

  private FloatingRateOption(
      StandardId id,
      RateIndex index,
      LocalDate startDate,
      LocalDate endDate,
      double rate,
      double pikSpread,
      Currency currency,
      DayCount dayCount,
      Frequency paymentFrequency) {
    JodaBeanUtils.notNull(id, "id");
    JodaBeanUtils.notNull(startDate, "startDate");
    JodaBeanUtils.notNull(endDate, "endDate");
    ArgChecker.notNegative(rate, "rate");
    ArgChecker.notNegative(pikSpread, "pikSpread");
    JodaBeanUtils.notNull(currency, "currency");
    JodaBeanUtils.notNull(dayCount, "dayCount");
    JodaBeanUtils.notNull(paymentFrequency, "paymentFrequency");
    this.id = id;
    this.index = index;
    this.startDate = startDate;
    this.endDate = endDate;
    this.rate = rate;
    this.pikSpread = pikSpread;
    this.currency = currency;
    this.dayCount = dayCount;
    this.paymentFrequency = paymentFrequency;
    validate();
  }

  @Override
  public FloatingRateOption.Meta metaBean() {
    return FloatingRateOption.Meta.INSTANCE;
  }

  //-----------------------------------------------------------------------
  /**
   * Gets the id.
   * @return the value of the property, not null
   */
  public StandardId getId() {
    return id;
  }

  //-----------------------------------------------------------------------
  /**
   * Gets the type of index, e.g. 'USD-LIBOR-1M'.
   * @return the optional value of the property, not null
   */
  public Optional<RateIndex> getIndex() {
    return Optional.ofNullable(index);
  }

  //-----------------------------------------------------------------------
  /**
   * Gets the start date of the option.
   * <p>
   * Interest accrues from this date.
   * @return the value of the property, not null
   */
  public LocalDate getStartDate() {
    return startDate;
  }

  //-----------------------------------------------------------------------
  /**
   * Gets the end date of the option.
   * <p>
   * Interest accrues to this date.
   * @return the value of the property, not null
   */
  public LocalDate getEndDate() {
    return endDate;
  }

  //-----------------------------------------------------------------------
  /**
   * Gets the cash rate of the accrual.
   * <p>
   * Cash interest "all-in" rate. Does NOT include PIK.
   * @return the value of the property
   */
  public double getRate() {
    return rate;
  }

  //-----------------------------------------------------------------------
  /**
   * Gets the PIK rate of the accrual.
   * <p>
   * PIK interest.
   * @return the value of the property
   */
  public double getPikSpread() {
    return pikSpread;
  }

  //-----------------------------------------------------------------------
  /**
   * Gets the accrual option currency.
   * @return the value of the property, not null
   */
  public Currency getCurrency() {
    return currency;
  }

  //-----------------------------------------------------------------------
  /**
   * Gets the day count convention.
   * <p>
   * This is used to convert dates to a numerical value.
   * @return the value of the property, not null
   */
  public DayCount getDayCount() {
    return dayCount;
  }

  //-----------------------------------------------------------------------
  /**
   * Gets frequency of accrual period.
   * @return the value of the property, not null
   */
  public Frequency getPaymentFrequency() {
    return paymentFrequency;
  }

  //-----------------------------------------------------------------------
  /**
   * Returns a builder that allows this bean to be mutated.
   * @return the mutable builder, not null
   */
  public Builder toBuilder() {
    return new Builder(this);
  }

  @Override
  public boolean equals(Object obj) {
    if (obj == this) {
      return true;
    }
    if (obj != null && obj.getClass() == this.getClass()) {
      FloatingRateOption other = (FloatingRateOption) obj;
      return JodaBeanUtils.equal(id, other.id) &&
          JodaBeanUtils.equal(index, other.index) &&
          JodaBeanUtils.equal(startDate, other.startDate) &&
          JodaBeanUtils.equal(endDate, other.endDate) &&
          JodaBeanUtils.equal(rate, other.rate) &&
          JodaBeanUtils.equal(pikSpread, other.pikSpread) &&
          JodaBeanUtils.equal(currency, other.currency) &&
          JodaBeanUtils.equal(dayCount, other.dayCount) &&
          JodaBeanUtils.equal(paymentFrequency, other.paymentFrequency);
    }
    return false;
  }

  @Override
  public int hashCode() {
    int hash = getClass().hashCode();
    hash = hash * 31 + JodaBeanUtils.hashCode(id);
    hash = hash * 31 + JodaBeanUtils.hashCode(index);
    hash = hash * 31 + JodaBeanUtils.hashCode(startDate);
    hash = hash * 31 + JodaBeanUtils.hashCode(endDate);
    hash = hash * 31 + JodaBeanUtils.hashCode(rate);
    hash = hash * 31 + JodaBeanUtils.hashCode(pikSpread);
    hash = hash * 31 + JodaBeanUtils.hashCode(currency);
    hash = hash * 31 + JodaBeanUtils.hashCode(dayCount);
    hash = hash * 31 + JodaBeanUtils.hashCode(paymentFrequency);
    return hash;
  }

  @Override
  public String toString() {
    StringBuilder buf = new StringBuilder(320);
    buf.append("FloatingRateOption{");
    buf.append("id").append('=').append(id).append(',').append(' ');
    buf.append("index").append('=').append(index).append(',').append(' ');
    buf.append("startDate").append('=').append(startDate).append(',').append(' ');
    buf.append("endDate").append('=').append(endDate).append(',').append(' ');
    buf.append("rate").append('=').append(rate).append(',').append(' ');
    buf.append("pikSpread").append('=').append(pikSpread).append(',').append(' ');
    buf.append("currency").append('=').append(currency).append(',').append(' ');
    buf.append("dayCount").append('=').append(dayCount).append(',').append(' ');
    buf.append("paymentFrequency").append('=').append(JodaBeanUtils.toString(paymentFrequency));
    buf.append('}');
    return buf.toString();
  }

  //-----------------------------------------------------------------------
  /**
   * The meta-bean for {@code FloatingRateOption}.
   */
  public static final class Meta extends DirectMetaBean {
    /**
     * The singleton instance of the meta-bean.
     */
    static final Meta INSTANCE = new Meta();

    /**
     * The meta-property for the {@code id} property.
     */
    private final MetaProperty<StandardId> _id = DirectMetaProperty.ofImmutable(
        this, "id", FloatingRateOption.class, StandardId.class);
    /**
     * The meta-property for the {@code index} property.
     */
    private final MetaProperty<RateIndex> _index = DirectMetaProperty.ofImmutable(
        this, "index", FloatingRateOption.class, RateIndex.class);
    /**
     * The meta-property for the {@code startDate} property.
     */
    private final MetaProperty<LocalDate> _startDate = DirectMetaProperty.ofImmutable(
        this, "startDate", FloatingRateOption.class, LocalDate.class);
    /**
     * The meta-property for the {@code endDate} property.
     */
    private final MetaProperty<LocalDate> _endDate = DirectMetaProperty.ofImmutable(
        this, "endDate", FloatingRateOption.class, LocalDate.class);
    /**
     * The meta-property for the {@code rate} property.
     */
    private final MetaProperty<Double> _rate = DirectMetaProperty.ofImmutable(
        this, "rate", FloatingRateOption.class, Double.TYPE);
    /**
     * The meta-property for the {@code pikSpread} property.
     */
    private final MetaProperty<Double> _pikSpread = DirectMetaProperty.ofImmutable(
        this, "pikSpread", FloatingRateOption.class, Double.TYPE);
    /**
     * The meta-property for the {@code currency} property.
     */
    private final MetaProperty<Currency> _currency = DirectMetaProperty.ofImmutable(
        this, "currency", FloatingRateOption.class, Currency.class);
    /**
     * The meta-property for the {@code dayCount} property.
     */
    private final MetaProperty<DayCount> _dayCount = DirectMetaProperty.ofImmutable(
        this, "dayCount", FloatingRateOption.class, DayCount.class);
    /**
     * The meta-property for the {@code paymentFrequency} property.
     */
    private final MetaProperty<Frequency> _paymentFrequency = DirectMetaProperty.ofImmutable(
        this, "paymentFrequency", FloatingRateOption.class, Frequency.class);
    /**
     * The meta-properties.
     */
    private final Map<String, MetaProperty<?>> _metaPropertyMap$ = new DirectMetaPropertyMap(
        this, null,
        "id",
        "index",
        "startDate",
        "endDate",
        "rate",
        "pikSpread",
        "currency",
        "dayCount",
        "paymentFrequency");

    /**
     * Restricted constructor.
     */
    private Meta() {
    }

    @Override
    protected MetaProperty<?> metaPropertyGet(String propertyName) {
      switch (propertyName.hashCode()) {
        case 3355:  // id
          return _id;
        case 100346066:  // index
          return _index;
        case -2129778896:  // startDate
          return _startDate;
        case -1607727319:  // endDate
          return _endDate;
        case 3493088:  // rate
          return _rate;
        case 696818085:  // pikSpread
          return _pikSpread;
        case 575402001:  // currency
          return _currency;
        case 1905311443:  // dayCount
          return _dayCount;
        case 863656438:  // paymentFrequency
          return _paymentFrequency;
      }
      return super.metaPropertyGet(propertyName);
    }

    @Override
    public FloatingRateOption.Builder builder() {
      return new FloatingRateOption.Builder();
    }

    @Override
    public Class<? extends FloatingRateOption> beanType() {
      return FloatingRateOption.class;
    }

    @Override
    public Map<String, MetaProperty<?>> metaPropertyMap() {
      return _metaPropertyMap$;
    }

    //-----------------------------------------------------------------------
    /**
     * The meta-property for the {@code id} property.
     * @return the meta-property, not null
     */
    public MetaProperty<StandardId> id() {
      return _id;
    }

    /**
     * The meta-property for the {@code index} property.
     * @return the meta-property, not null
     */
    public MetaProperty<RateIndex> index() {
      return _index;
    }

    /**
     * The meta-property for the {@code startDate} property.
     * @return the meta-property, not null
     */
    public MetaProperty<LocalDate> startDate() {
      return _startDate;
    }

    /**
     * The meta-property for the {@code endDate} property.
     * @return the meta-property, not null
     */
    public MetaProperty<LocalDate> endDate() {
      return _endDate;
    }

    /**
     * The meta-property for the {@code rate} property.
     * @return the meta-property, not null
     */
    public MetaProperty<Double> rate() {
      return _rate;
    }

    /**
     * The meta-property for the {@code pikSpread} property.
     * @return the meta-property, not null
     */
    public MetaProperty<Double> pikSpread() {
      return _pikSpread;
    }

    /**
     * The meta-property for the {@code currency} property.
     * @return the meta-property, not null
     */
    public MetaProperty<Currency> currency() {
      return _currency;
    }

    /**
     * The meta-property for the {@code dayCount} property.
     * @return the meta-property, not null
     */
    public MetaProperty<DayCount> dayCount() {
      return _dayCount;
    }

    /**
     * The meta-property for the {@code paymentFrequency} property.
     * @return the meta-property, not null
     */
    public MetaProperty<Frequency> paymentFrequency() {
      return _paymentFrequency;
    }

    //-----------------------------------------------------------------------
    @Override
    protected Object propertyGet(Bean bean, String propertyName, boolean quiet) {
      switch (propertyName.hashCode()) {
        case 3355:  // id
          return ((FloatingRateOption) bean).getId();
        case 100346066:  // index
          return ((FloatingRateOption) bean).index;
        case -2129778896:  // startDate
          return ((FloatingRateOption) bean).getStartDate();
        case -1607727319:  // endDate
          return ((FloatingRateOption) bean).getEndDate();
        case 3493088:  // rate
          return ((FloatingRateOption) bean).getRate();
        case 696818085:  // pikSpread
          return ((FloatingRateOption) bean).getPikSpread();
        case 575402001:  // currency
          return ((FloatingRateOption) bean).getCurrency();
        case 1905311443:  // dayCount
          return ((FloatingRateOption) bean).getDayCount();
        case 863656438:  // paymentFrequency
          return ((FloatingRateOption) bean).getPaymentFrequency();
      }
      return super.propertyGet(bean, propertyName, quiet);
    }

    @Override
    protected void propertySet(Bean bean, String propertyName, Object newValue, boolean quiet) {
      metaProperty(propertyName);
      if (quiet) {
        return;
      }
      throw new UnsupportedOperationException("Property cannot be written: " + propertyName);
    }

  }

  //-----------------------------------------------------------------------
  /**
   * The bean-builder for {@code FloatingRateOption}.
   */
  public static final class Builder extends DirectFieldsBeanBuilder<FloatingRateOption> {

    private StandardId id;
    private RateIndex index;
    private LocalDate startDate;
    private LocalDate endDate;
    private double rate;
    private double pikSpread;
    private Currency currency;
    private DayCount dayCount;
    private Frequency paymentFrequency;

    /**
     * Restricted constructor.
     */
    private Builder() {
      applyDefaults(this);
    }

    /**
     * Restricted copy constructor.
     * @param beanToCopy  the bean to copy from, not null
     */
    private Builder(FloatingRateOption beanToCopy) {
      this.id = beanToCopy.getId();
      this.index = beanToCopy.index;
      this.startDate = beanToCopy.getStartDate();
      this.endDate = beanToCopy.getEndDate();
      this.rate = beanToCopy.getRate();
      this.pikSpread = beanToCopy.getPikSpread();
      this.currency = beanToCopy.getCurrency();
      this.dayCount = beanToCopy.getDayCount();
      this.paymentFrequency = beanToCopy.getPaymentFrequency();
    }

    //-----------------------------------------------------------------------
    @Override
    public Object get(String propertyName) {
      switch (propertyName.hashCode()) {
        case 3355:  // id
          return id;
        case 100346066:  // index
          return index;
        case -2129778896:  // startDate
          return startDate;
        case -1607727319:  // endDate
          return endDate;
        case 3493088:  // rate
          return rate;
        case 696818085:  // pikSpread
          return pikSpread;
        case 575402001:  // currency
          return currency;
        case 1905311443:  // dayCount
          return dayCount;
        case 863656438:  // paymentFrequency
          return paymentFrequency;
        default:
          throw new NoSuchElementException("Unknown property: " + propertyName);
      }
    }

    @Override
    public Builder set(String propertyName, Object newValue) {
      switch (propertyName.hashCode()) {
        case 3355:  // id
          this.id = (StandardId) newValue;
          break;
        case 100346066:  // index
          this.index = (RateIndex) newValue;
          break;
        case -2129778896:  // startDate
          this.startDate = (LocalDate) newValue;
          break;
        case -1607727319:  // endDate
          this.endDate = (LocalDate) newValue;
          break;
        case 3493088:  // rate
          this.rate = (Double) newValue;
          break;
        case 696818085:  // pikSpread
          this.pikSpread = (Double) newValue;
          break;
        case 575402001:  // currency
          this.currency = (Currency) newValue;
          break;
        case 1905311443:  // dayCount
          this.dayCount = (DayCount) newValue;
          break;
        case 863656438:  // paymentFrequency
          this.paymentFrequency = (Frequency) newValue;
          break;
        default:
          throw new NoSuchElementException("Unknown property: " + propertyName);
      }
      return this;
    }

    @Override
    public Builder set(MetaProperty<?> property, Object value) {
      super.set(property, value);
      return this;
    }

    @Override
    public FloatingRateOption build() {
      return new FloatingRateOption(
          id,
          index,
          startDate,
          endDate,
          rate,
          pikSpread,
          currency,
          dayCount,
          paymentFrequency);
    }

    //-----------------------------------------------------------------------
    /**
     * Sets the id.
     * @param id  the new value, not null
     * @return this, for chaining, not null
     */
    public Builder id(StandardId id) {
      JodaBeanUtils.notNull(id, "id");
      this.id = id;
      return this;
    }

    /**
     * Sets the type of index, e.g. 'USD-LIBOR-1M'.
     * @param index  the new value
     * @return this, for chaining, not null
     */
    public Builder index(RateIndex index) {
      this.index = index;
      return this;
    }

    /**
     * Sets the start date of the option.
     * <p>
     * Interest accrues from this date.
     * @param startDate  the new value, not null
     * @return this, for chaining, not null
     */
    public Builder startDate(LocalDate startDate) {
      JodaBeanUtils.notNull(startDate, "startDate");
      this.startDate = startDate;
      return this;
    }

    /**
     * Sets the end date of the option.
     * <p>
     * Interest accrues to this date.
     * @param endDate  the new value, not null
     * @return this, for chaining, not null
     */
    public Builder endDate(LocalDate endDate) {
      JodaBeanUtils.notNull(endDate, "endDate");
      this.endDate = endDate;
      return this;
    }

    /**
     * Sets the cash rate of the accrual.
     * <p>
     * Cash interest "all-in" rate. Does NOT include PIK.
     * @param rate  the new value
     * @return this, for chaining, not null
     */
    public Builder rate(double rate) {
      ArgChecker.notNegative(rate, "rate");
      this.rate = rate;
      return this;
    }

    /**
     * Sets the PIK rate of the accrual.
     * <p>
     * PIK interest.
     * @param pikSpread  the new value
     * @return this, for chaining, not null
     */
    public Builder pikSpread(double pikSpread) {
      ArgChecker.notNegative(pikSpread, "pikSpread");
      this.pikSpread = pikSpread;
      return this;
    }

    /**
     * Sets the accrual option currency.
     * @param currency  the new value, not null
     * @return this, for chaining, not null
     */
    public Builder currency(Currency currency) {
      JodaBeanUtils.notNull(currency, "currency");
      this.currency = currency;
      return this;
    }

    /**
     * Sets the day count convention.
     * <p>
     * This is used to convert dates to a numerical value.
     * @param dayCount  the new value, not null
     * @return this, for chaining, not null
     */
    public Builder dayCount(DayCount dayCount) {
      JodaBeanUtils.notNull(dayCount, "dayCount");
      this.dayCount = dayCount;
      return this;
    }

    /**
     * Sets frequency of accrual period.
     * @param paymentFrequency  the new value, not null
     * @return this, for chaining, not null
     */
    public Builder paymentFrequency(Frequency paymentFrequency) {
      JodaBeanUtils.notNull(paymentFrequency, "paymentFrequency");
      this.paymentFrequency = paymentFrequency;
      return this;
    }

    //-----------------------------------------------------------------------
    @Override
    public String toString() {
      StringBuilder buf = new StringBuilder(320);
      buf.append("FloatingRateOption.Builder{");
      buf.append("id").append('=').append(JodaBeanUtils.toString(id)).append(',').append(' ');
      buf.append("index").append('=').append(JodaBeanUtils.toString(index)).append(',').append(' ');
      buf.append("startDate").append('=').append(JodaBeanUtils.toString(startDate)).append(',').append(' ');
      buf.append("endDate").append('=').append(JodaBeanUtils.toString(endDate)).append(',').append(' ');
      buf.append("rate").append('=').append(JodaBeanUtils.toString(rate)).append(',').append(' ');
      buf.append("pikSpread").append('=').append(JodaBeanUtils.toString(pikSpread)).append(',').append(' ');
      buf.append("currency").append('=').append(JodaBeanUtils.toString(currency)).append(',').append(' ');
      buf.append("dayCount").append('=').append(JodaBeanUtils.toString(dayCount)).append(',').append(' ');
      buf.append("paymentFrequency").append('=').append(JodaBeanUtils.toString(paymentFrequency));
      buf.append('}');
      return buf.toString();
    }

  }

  //-------------------------- AUTOGENERATED END --------------------------
}
